'use client';

import React, { useState, useEffect, useRef } from 'react';
import { AnimatePresence, motion } from 'framer-motion';

interface Message {
  id: string;
  text: string;
  type: 'success' | 'error' | 'info';
  timestamp: number;
}

interface GameStatusTickerProps {
  className?: string;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏–≥—Ä–µ
 */
export default function GameStatusTicker({ className = '' }: GameStatusTickerProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const messagesRef = useRef<Message[]>([]);
  const MAX_MESSAGES = 5;
  const MESSAGE_LIFETIME = 5000; // 5 —Å–µ–∫—É–Ω–¥
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const addMessage = (text: string, type: 'success' | 'error' | 'info') => {
    const newMessage: Message = {
      id: `msg-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
      text,
      type,
      timestamp: Date.now()
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_MESSAGES
    const updatedMessages = [...messagesRef.current, newMessage].slice(-MAX_MESSAGES);
    messagesRef.current = updatedMessages;
    setMessages(updatedMessages);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–µ—Ä—É
    setTimeout(() => {
      removeMessage(newMessage.id);
    }, MESSAGE_LIFETIME);
  };
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID
  const removeMessage = (id: string) => {
    const updatedMessages = messagesRef.current.filter(msg => msg.id !== id);
    messagesRef.current = updatedMessages;
    setMessages(updatedMessages);
  };
  
  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã
  useEffect(() => {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã
    const handleGameEvent = (event: CustomEvent) => {
      const eventData = event.detail;
      
      switch (eventData.type) {
        case 'game_save_start':
          addMessage('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã...', 'info');
          break;
        case 'game_save_success':
          addMessage('–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
          break;
        case 'game_save_error':
          addMessage(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${eventData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
          break;
        case 'game_sync_start':
          addMessage('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...', 'info');
          break;
        case 'game_sync_success':
          addMessage('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
          break;
        case 'game_sync_error':
          addMessage(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${eventData.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'}`, 'error');
          break;
        case 'achievement_unlocked':
          addMessage(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${eventData.name}`, 'success');
          break;
        default:
          if (eventData.message) {
            addMessage(eventData.message, eventData.messageType || 'info');
          }
      }
    };
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    window.addEventListener('game_event', handleGameEvent as EventListener);
    
    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const savedState = localStorage.getItem('snotcoin_game_state');
    if (savedState) {
      try {
        const state = JSON.parse(savedState);
        const lastModified = state._lastModified;
        
        if (lastModified) {
          const date = new Date(lastModified);
          addMessage(`–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${date.toLocaleString()}`, 'info');
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', e);
      }
    }
    
    // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      window.removeEventListener('game_event', handleGameEvent as EventListener);
    };
  }, []);
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º
  if (messages.length === 0) {
    return null;
  }
  
  return (
    <div className={`game-status-ticker fixed left-1/2 transform -translate-x-1/2 z-50 ${className}`} style={{ top: '20px' }}>
      <AnimatePresence mode="popLayout">
        {messages.map((message) => (
          <motion.div
            key={message.id}
            initial={{ opacity: 0, y: -20, scale: 0.8 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, scale: 0.8, transition: { duration: 0.2 } }}
            className={`py-2 px-4 rounded-full shadow-lg text-sm font-medium mb-2 mx-auto max-w-md text-center ${
              message.type === 'success' ? 'bg-green-600 text-white' :
              message.type === 'error' ? 'bg-red-600 text-white' :
              'bg-blue-600 text-white'
            }`}
            onClick={() => removeMessage(message.id)}
          >
            {message.text}
          </motion.div>
        ))}
      </AnimatePresence>
    </div>
  );
} 