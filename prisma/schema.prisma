// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// Модель пользователя
model User {
  id            String      @id @default(uuid())
  telegram_id   Int?        @unique // Опциональный, для обратной совместимости
  farcaster_fid Int?        @unique // Farcaster ID пользователя
  farcaster_username String? // Имя пользователя в Farcaster
  farcaster_displayname String? // Отображаемое имя в Farcaster
  farcaster_pfp String?     // URL аватара в Farcaster
  username      String?     // Общее имя пользователя
  first_name    String?     // Общее имя
  last_name     String?     // Общая фамилия
  auth_type     String      @default("telegram") // Тип аутентификации: "telegram" или "farcaster"
  jwt_token     String?     // JWT токен для аутентификации
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  progress      Progress?   // Связь с прогрессом пользователя

  @@map("users")
}

// Модель прогресса игры
model Progress {
  id          String      @id @default(uuid())
  user_id     String      @unique
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  game_state  Json        // Хранение состояния игры в формате JSON
  version     Int         @default(1) // Версия для отслеживания изменений
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  @@map("user_progress")
}
